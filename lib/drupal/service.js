// Generated by CoffeeScript 1.6.3
(function() {
  var Q, Service, exports, http, https, _opts;

  http = require('http');

  https = require('https');

  Q = require('q');

  exports = module.exports = {};

  _opts = {
    hostname: 'localhost',
    port: 80
  };

  Service = (function() {
    function Service(endpoint, credentials, opts, useSSL) {
      this.endpoint = endpoint;
      this.opts = opts != null ? opts : _opts;
      this.useSSL = useSSL != null ? useSSL : false;
      this.username = credentials.username, this.password = credentials.password;
      if (!((this.username != null) || (this.password != null))) {
        throw new Error('Need login credentials');
      }
      if (this.endpoint[0] !== '/') {
        this.endpoint = "/" + this.endpoint;
      }
      this.cookie = null;
      this.csrfToken = null;
      this.user = null;
      if (this.opts.port === 443) {
        this.useSSL = true;
      }
      return this;
    }

    Service.prototype.connect = function() {
      var _this = this;
      if ((this.user != null) && (this.csrfToken != null) && (this.cookie != null)) {
        console.info('Already connected :)');
        return Q(this.user);
      }
      console.info('Connecting to Service API...');
      return Q.when(this.resource('/system/connect'), function(response) {
        if (response.body.user.name === void 0) {
          return Q.when(_this.login(_this.username, _this.password), function(user) {
            _this.user = user;
            return Q.when(_this.getToken(), function(token) {
              _this.csrfToken = token;
              return _this.user;
            });
          });
        } else {
          console.info('Already logged in :)');
          _this.user = response.body.user;
          return _this.user;
        }
      });
    };

    Service.prototype.login = function(username, password) {
      var body,
        _this = this;
      body = {
        username: username,
        password: password
      };
      console.info("Loggin in user: " + username + "...");
      return Q.when(this.resource('/user/login', 'post', body), function(response) {
        console.info('Login successful');
        _this.cookie = "" + response.body.session_name + "=" + response.body.sessid;
        return response.body.user;
      });
    };

    Service.prototype.logout = function() {
      var _this = this;
      if (this.user == null) {
        return Q(false);
      }
      return Q.when(this.resource('/user/logout'), function(response) {
        _this.cookie = _this.csrfToken = _this.user = null;
        console.log('User logged out.');
        return Q(true);
      });
    };

    Service.prototype.getToken = function() {
      console.info('Getting session token...');
      return Q.when(this.resource('/user/token'), function(response) {
        return response.body.token;
      });
    };

    Service.prototype.resource = function(resource, method, body) {
      var options;
      if (method == null) {
        method = 'post';
      }
      if (body == null) {
        body = null;
      }
      resource = resource.replace(/\.\w+$/i, '');
      options = this.opts;
      options.path = "" + this.endpoint + resource + ".json";
      options.method = method.toUpperCase();
      options.headers = {
        'accept': 'application/json',
        'content-type': 'application/json',
        'transfer-encoding': 'chunked'
      };
      if (this.csrfToken != null) {
        options.headers['x-csrf-token'] = this.csrfToken;
      }
      if (this.cookie != null) {
        options.headers['cookie'] = this.cookie;
      }
      if (this.useSSL || this.opts.port === 443) {
        options.agent = new https.Agent(options);
      }
      return this._request(options, body);
    };

    Service.prototype._request = function(options, body) {
      var data, deferred, req, reqMethod, response;
      if (body == null) {
        body = null;
      }
      deferred = Q.defer();
      response = {};
      data = '';
      if (this.useSSL || this.opts.port === 443) {
        reqMethod = https.request;
      } else {
        reqMethod = http.request;
      }
      req = reqMethod(options, function(res) {
        response.status = res.statusCode;
        response.headers = res.headers;
        res.on('data', function(chunk) {
          return data += chunk;
        });
        return res.on('end', function() {
          var error;
          try {
            response.body = JSON.parse(data);
          } catch (_error) {
            error = _error;
            deferred.reject(error);
          }
          if (response.status !== 200) {
            deferred.reject(response);
          }
          return deferred.resolve(response);
        });
      });
      if (body != null) {
        req.write(JSON.stringify(body));
      }
      req.on('error', function(err) {
        return deferred.reject(err);
      });
      req.end();
      return deferred.promise;
    };

    return Service;

  })();

  exports.Service = Service;

}).call(this);
